///Autor: Eargosha

import 'dart:math';
//—Å–≤–æ–∏ –º–æ–¥—É–ª–∏:
import 'package:chat_bot/services/weather_service.dart';
import '../models/message.dart';
//–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'dart:convert';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'dart:async';

///–ö–ª–∞—Å—Å —á–∞—Ç –±–æ—Ç–∞, –º–µ–∂–¥—É –∫–ª–∞—Å—Å–æ–º ChatBot –∏ Message(–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª Message.dart) –µ—Å—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
///–ü–æ–ª—è:
///--Map<RegExp, Function> commands - —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è(–∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∏ –¥–µ–ª–µ–≥–∞—Ç—ã(–º–µ—Ç–æ–¥—ã —á–∞—Ç –±–æ—Ç–∞)
///--List<Message> allMessages - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∞—Å—Å Message, —Å–æ–∑–¥–∞–≤–∞—è –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
///--String botName - –∏–º—è –±–æ—Ç–∞, –¥–∞ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫ –Ω–µ–º—É —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ü–∏—é (–º–±)???(get, set)
///–ú–µ—Ç–æ–¥–æ–≤ –º–Ω–æ–≥–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ª–æ–≤–∞—Ä—é commands –¥–ª—è –∏—Ö –∏–∑—É—á–µ–Ω–∏—è
class ChatBot {
  //—Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è(–∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∏ –¥–µ–ª–µ–≥–∞—Ç—ã(–º–µ—Ç–æ–¥—ã —á–∞—Ç –±–æ—Ç–∞)
  late Map<RegExp, Function> commands;
  //–ø–æ–ª–µ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–µ–∫, —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∫–ª–∞—Å—Å–∞ Message
  List<Message> allMessages = [];
  //–∏–º—è –±–æ—Ç–∞, –¥–∞ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å
  String botName = '';

  ///–ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  void sendMessage(String userInput, String uName) {
    //–µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –≤–≤–µ–ª –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
    if (userInput != '') {
      allMessages.add(
        Message(
          Future.value(userInput),
          uName,
          true,
          DateTime.now(),
        ),
      );
      botResponse(userInput);
    }
  }

//
  ///–ú–µ—Ç–æ–¥ —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  void botResponse(String userInput) {
    //–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –≤–≤–µ–ª –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
    if (userInput != '') {
      allMessages.add(
        Message(
          processCommand(userInput),
          botName,
          false,
          DateTime.now(),
        ),
      );
    }
  }

  ///–ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
  Future<void> saveToFile(String userName) async {
    //–ü—Ä–æ–±—É–ï–ú
    try {
      //—á–∏—Å—Ç–∏–º –Ω–∏–∫
      userName = cleanFileName(userName);
      //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
      //–≤ Android —ç—Ç–æ –±—É–¥–µ—Ç ../data/user/0/com.example.chat_bot/files/..
      //–≤ Windows —ç—Ç–æ –±—É–¥–µ—Ç ../username/documents/..
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/$userName.json');

      //–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Json –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      List<Map<String, dynamic>> messagesJson = [];
      for (var message in allMessages) {
        String messageValue = await message
            .message; // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Future –∏–∑ –ø–æ–ª—è –∫–ª–∞—Å—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        Map<String, dynamic> messageJson = {
          'message': messageValue,
          'senderName': message.senderName,
          'sender': message.sender,
          'sentTime': message.sentTime.toIso8601String(),
        };
        messagesJson.add(messageJson);
      }
      //–∫–æ–¥–∏—Ä—É–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
      final jsonString = json.encode(messagesJson);
      file.writeAsString(jsonString);
    } catch (e) {
      //–ï—Å–ª–∏ —á—Ç–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
      print('ERROR::FAILED TO SAVE USER DATA: $e');
    }
  }

  ///–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º OC
  String cleanFileName(String fileName) {
    final invalidChars = RegExp(r'[<>:"/\|?*]');
    return fileName.replaceAll(invalidChars, '');
  }

  ///–ú–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  Future<void> loadFromFile(String userName) async {
    //–ü—Ä–æ–±—É–ï–ú
    try {
      //—á–∏—Å—Ç–∏–º –Ω–∏–∫
      userName = cleanFileName(userName);
      //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
      //–≤ Android —ç—Ç–æ –±—É–¥–µ—Ç ../data/user/0/com.example.chat_bot/files/..
      //–≤ Windows —ç—Ç–æ –±—É–¥–µ—Ç ../username/documents/..
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/$userName.json');
      //–æ–∂–∏–¥–∞–µ–º —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      String contents = await file.readAsString();
      //–¥–µ–∫–æ–¥–∏—Ä—É–µ–º, —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤ –∫–ª–∞—Å—Å–µ Message
      List<dynamic> messagesJson = json.decode(contents);
      allMessages = messagesJson.map((json) => Message.fromJson(json)).toList();
    } catch (e) {
      //–ï—Å–ª–∏ —á—Ç–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
      print('ERROR::FAILED TO LOAD USER DATA: $e');
    }
  }

  ///–†–µ–≥—É–ª—è—Ä–Ω–æ-–¥–µ–ª–∏–≥–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ <–∫–∞–∫–∞—è –ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞> ArrowFunction <—á—Ç–æ –¥–µ–ª–∞—Ç—å>
  ChatBot() {
    commands = {
      RegExp(r'^.*(–ø—Ä–∏–≤–µ—Ç)|(–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π.{0,2}).*$', caseSensitive: false): () =>
          sayHello(),
      RegExp(r'^.*(–ø–æ–∫–∞)|(–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è).*$', caseSensitive: false): () =>
          sayBye(),
      RegExp(r'^.*(–∫–∞–∫.* –¥–µ–ª–∞)|(–∫–∞–∫ –∂–∏.*)|(–∫–∞–∫ —Ç—ã).*$', caseSensitive: false):
          () => sayAnswerHowAreYou(),
      RegExp(r'(—Å–ø–∞—Å–∏–±–æ)|(–±–ª–∞–≥–æ–¥–∞—Ä—é)', caseSensitive: false): () =>
          sayYoureWelcome(),
      RegExp(r'(help)|(–ø–æ–º–æ–≥–∏)|(–ø–æ–º–æ—â—å)', caseSensitive: false): () =>
          sayHelp(),
      RegExp(r'^(\d+)\s*([+\-*/])\s*(\d+)$', caseSensitive: false):
          (String mathToSolve) => sayCalculationResult(mathToSolve),
      RegExp(r'.*@.*', caseSensitive: false): () => sayPochta(),
      RegExp(r'^.*(–≤—Ä–µ–º.{0,3})|(—á–∞—Å.{0,3}).*$', caseSensitive: false): () =>
          sayTimeNow(),
      RegExp(r'^.*(–¥–∞—Ç.{0,1})|(—Å–µ–≥–æ–¥–Ω—è).*$', caseSensitive: false): () =>
          sayDateNow(),
      RegExp(r'(–ø–æ–≥–æ–¥–∞)|(–∫–∞–∫ —Ç–∞–º –Ω–∞ —É–ª–∏—Ü–µ)', caseSensitive: false): () =>
          sayWeather(),
      RegExp(r'^.*(–Ω–æ–∂–Ω–∏—Ü—ã)|(–∫–∞–º–µ–Ω—å)|(–±—É–º–∞–≥–∞).*$', caseSensitive: false):
          (String playerChoice) => playRockPaper(playerChoice),
      RegExp(r'^.*(—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.{0,3})|(–∏—Å—Ç–æ—Ä.{0,3}).*$',
          caseSensitive: false): () => sayHowManyMesseges(),
    };
  }

  ///–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π, userInput –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ —Ç–∞–∫–æ–µ, –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞—Ü–∏–π –∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ
  ///–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏–∏ command.pattern.contains(<–∫–æ–º–∞–Ω–¥–∞, –∑–∞–¥–∞–≤–∞–µ–º–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º>)
  Future<String> processCommand(String userInput) {
    //–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é —Ä–µ–≥—É–ª—è—Ä–∫—É
    for (var command in commands.keys) {
      //–µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è - –¥–µ–ª–∞–µ–º —à—Ç—É–∫–∏
      if (command.hasMatch(userInput)) {
        if (commands[command] is Function) {
          if (command.pattern.contains(r'^(\d+)\s*([+\-*/])\s*(\d+)$')) {
            return commands[command]!(userInput);
          }
          if (command.pattern.contains(r'^.*(–Ω–æ–∂–Ω–∏—Ü—ã)|(–∫–∞–º–µ–Ω—å)|(–±—É–º–∞–≥–∞).*$')) {
            return commands[command]!(userInput);
          } else {
            return commands[command]!();
          }
        }
      }
    }
    //–Ω–µ—Ç - –ø–ª–∞—á–µ–º
    return Future.value(
        "–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å!!! üò≠ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π 'help'.");
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞ —Å–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
  Future<String> sayHowManyMesseges() {
    return Future.value(
        '–¢–∞–∞–∞–∞–∫... \n–°–æ–≤–º–µ—Å—Ç–Ω—ã–º–∏ —É—Å–∏–ª–∏—è–º–∏ –º—ã –Ω–∞–ø–∏—Å–∞–ª–∏ ${allMessages.length + 1} —Å–æ–æ–±—â–µ–Ω–∏–π! üí™');
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –∏–≥—Ä—ã –≤ "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
  Future<String> playRockPaper(String playerChoice) {
    List<String> choices = ["–∫–∞–º–µ–Ω—å", "–±—É–º–∞–≥–∞", "–Ω–æ–∂–Ω–∏—Ü—ã"];

    Random random = Random();
    final int rand = random.nextInt(3);

    String computerChoice = choices[rand];
    String result = "";

    if (playerChoice.contains(computerChoice)) {
      result = "–ú–æ–π –≤—ã–±–æ—Ä: $computerChoice... \n–≠—Ç–æ –Ω–∏—á—å—è! ü§∑";
    } else {
      switch (playerChoice) {
        case "–∫–∞–º–µ–Ω—å":
          result = computerChoice == "–Ω–æ–∂–Ω–∏—Ü—ã"
              ? "–Ø –≤—ã–±—Ä–∞–ª $computerChoice... \n–¢—ã –≤—ã–∏–≥—Ä–∞–ª! ‚úîÔ∏è"
              : "–Ø –≤—ã–±—Ä–∞–ª $computerChoice...\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! ‚ùå";
          break;
        case "–±—É–º–∞–≥–∞":
          result = computerChoice == "–∫–∞–º–µ–Ω—å"
              ? "–Ø –≤—ã–±—Ä–∞–ª $computerChoice... \n–¢—ã –≤—ã–∏–≥—Ä–∞–ª! ‚úîÔ∏è"
              : "–Ø –≤—ã–±—Ä–∞–ª $computerChoice...\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! ‚ùå";
          break;
        case "–Ω–æ–∂–Ω–∏—Ü—ã":
          result = computerChoice == "–±—É–º–∞–≥–∞"
              ? "–Ø –≤—ã–±—Ä–∞–ª $computerChoice... \n–¢—ã –≤—ã–∏–≥—Ä–∞–ª! ‚úîÔ∏è"
              : "–Ø –≤—ã–±—Ä–∞–ª $computerChoice...\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! ‚ùå";
          break;
      }
    }
    return Future.value(result);
  }

  /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π - —Ç.–∫. –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  Future<String> sayWeather() async {
    WeatherService weatherService = WeatherService();
    String result;
    try {
      //—Ç—É—Ç –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥–∞, –Ω–æ —è –Ω–µ —Å—Ç–∞–ª –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥, —Ç.–∫. –Ω–∞ openweathermap –≥–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω
      //–±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∞–Ω–≥–ª —è–∑—ã–∫–µ
      result = await weatherService.getWeatherData('Chita');
    } catch (error) {
      return ("${error.toString()}\n –ö–æ—Ä–æ—á–µ, –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!");
      //–±—ã–≤–∞—é—Ç –∏ –æ—à–∏–±–∫–∏, –Ω–µ —Å—Ç–∏—Å–Ω—è–µ–º—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. —Ç–∞–º –µ—Å—Ç—å –æ—à–∏–±–∫–∞ "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
    }
    return (result); // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è help
  Future<String> sayHelp() {
    return Future.value(
        "'–ü—Ä–∏–≤–µ—Ç' : –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n'–ü–æ–∫–∞': –ü—Ä–æ—â–∞–Ω–∏–µ\n'–ö–∞–∫ –¥–µ–ª–∞?': –ë–æ—Ç —Ç–æ–∂–µ –ª–∏—á–Ω–æ—Å—Ç—å!"
        "\n'–°–ø–∞—Å–∏–±–æ': –°–º—É—â–∞—Ç—å –±–æ—Ç–∞\n'–î–∞—Ç–∞' –∏–ª–∏ '–°–µ–≥–æ–¥–Ω—è': –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É\n'–í—Ä–µ–º—è' –∏–ª–∏ '–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å': –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è"
        "\n'–ü–æ–≥–æ–¥–∞' –∏–ª–∏ '–ö–∞–∫ —Ç–∞–º –Ω–∞ —É–ª–∏—Ü–µ?': –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –ß–∏—Ç–µ"
        "\n'<–ß–∏—Å–ª–æ> (+-*/) <—á–∏—Å–ª–æ>': –í–µ—Ä–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
        "\n'–ö–∞–º–µ–Ω—å' –∏–ª–∏ '–ù–æ–∂–Ω–∏—Ü—ã' –∏–ª–∏ '–ë—É–º–∞–≥–∞': –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞!'"
        "\n'–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π?' –∏–ª–∏ '–ò—Å—Ç–æ—Ä–∏—è': –ø–æ–∫–∞–∂–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—ã —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—Å–∞–ª–∏");
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫–∞
  Future<String> sayBye() {
    return Future.value('–ü–æ–∫–∞! ü´†');
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç
  Future<String> sayHello() {
    return Future.value('–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?');
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –∫–∞–∫ –¥–µ–ª–∞?
  Future<String> sayAnswerHowAreYou() {
    return Future.value('–£ –º–µ–Ω—è –≤—Å–µ –ë–û–¢–æ–æ—Ç–ª–∏—á–Ω–æ! üòÄ');
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è —Å–ø–∞—Å–∏–±–æ
  Future<String> sayYoureWelcome() {
    return Future.value('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. ü§ó');
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã (–±—ã–ª–∞ –≤ —Ç–µ—Å—Ç–µ)
  Future<String> sayPochta() {
    return Future.value(
        '–≠—Ç–æ —á—å—è-—Ç–æ –ø–æ—á—Ç–∞! –ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å –Ω–µ–π –¥–µ–ª–∞—Ç—å.');
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–π—á–∞—Å
  Future<String> sayTimeNow() {
    return Future.value("–°–µ–π—á–∞—Å ${DateFormat('HH:mm').format(DateTime.now())}");
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è
  Future<String> sayDateNow() {
    initializeDateFormatting('ru');
    return Future.value(
        "–°–µ–≥–æ–¥–Ω—è ${DateFormat('EEEE', 'ru').format(DateTime.now())} ${DateFormat('dd.MM.yyyy').format(DateTime.now())}");
  }

  /// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π +-/*
  Future<String> sayCalculationResult(String mathToSolve) {
    double result;
    RegExp regex = RegExp(r'^(\d+)\s*([+\-*/])\s*(\d+)$');
    //—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é match
    RegExpMatch? match = regex.firstMatch(mathToSolve);
    //—Ä–∞–∑–±–∏–≤–∞–µ–º mathc –Ω–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–æ–∫
    String? num1 = match!.group(1);
    String? operator = match.group(2);
    String? num2 = match.group(3);

    //–∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º–∏
    switch (operator) {
      case '+':
        result = double.parse(num1 ?? "") + double.parse(num2 ?? "");
        break;
      case '-':
        result = double.parse(num1 ?? "") - double.parse(num2 ?? "");
        break;
      case '*':
        result = double.parse(num1 ?? "") * double.parse(num2 ?? "");
        break;
      case '/':
        result = double.parse(num1 ?? "") / double.parse(num2 ?? "");
        break;
      default:
        result = 0;
    }
    return Future.value('–†–µ–∑—É–ª—å—Ç–∞—Ç: $result');
  }
}
