///Autor: Eargosha

///Что насчет доступности классов:
// В Dart нет специальных ключевых слов (public; private; protected) то есть спецификаторов доступа, 
// поэтому все идентификаторы «публичны» по умолчанию. Вопрос инкапсуляции решен соглашением: 
// приватными считаются все члены класса, чье имя начинается с подчеркивания "_".

/// Класс Message для класса ChatBot, отношение: композиция (Messege есть поле для ChatBot)
class Message {
// описываем их final, потому что:
// В данном случае поля класса Message описываются как final, потому что они должны
// быть инициализированы при создании объекта класса Message и не могут быть изменены после этого.
// Ключевое слово final указывает, что значение поля будет установлено только один раз, либо в момент
// инициализации при создании объекта через конструктор, либо при объявлении поля.
// После этого значение поля не может быть изменено.

  final Future<String> message;
  final String senderName;
  final bool sender; //Существует тут для определения кто есть отправитель(пользователь или бот) в виде bool, так удобней
  final DateTime sentTime;

// тот заветный простой конструктор
  Message(
    this.message,
    this.senderName,
    this.sender,
    this.sentTime,
  );

// Метод класса для перевода в Json формат
  Map<String, dynamic> toJson() => {
        'message': message.toString(),
        'senderName': senderName,
        'sender': sender,
        'sentTime': sentTime.toIso8601String(),
      };

// Метод класса для перевода из Json в Messege формат
  factory Message.fromJson(Map<String, dynamic> json) {
    return Message(
      Future.value(json['message']),
      json['senderName'],
      json['sender'],
      DateTime.parse(json['sentTime']),
    );
  }
}
///Теория про factory:
// factory - это ключевое слово в языке программирования Dart, которое используется для создания фабричных конструкторов.
// Фабричные конструкторы в Dart позволяют создавать объекты класса с использованием различных способов и логики,
// не обязательно прямо возвращая новый экземпляр класса.
// В вашем примере метод fromJson является фабричным конструктором. Он принимает Map<String, dynamic> json в качестве
// аргумента и создает новый объект класса Message на основе данных из этого Map.
